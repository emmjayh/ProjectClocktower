name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev python3-pyaudio ffmpeg
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Install dev dependencies first (lighter)
        pip install -r requirements-dev.txt
        # Install only core dependencies, skip heavy ML dependencies
        pip install requests aiohttp websockets pydantic pillow pyinstaller
        
    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Check code formatting with black
      run: |
        black --check src/
        
    - name: Check import sorting with isort
      run: |
        isort --profile black --check-only src/
        
    - name: Test with pytest
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-windows:
    runs-on: windows-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install only core dependencies for Windows build, skip heavy ML packages
        pip install requests aiohttp websockets pydantic pillow pyinstaller
        
    - name: Build Windows executable
      run: |
        python build_windows.py
        
    - name: Create ZIP of Windows executable
      shell: pwsh
      run: |
        cd dist
        Compress-Archive -Path "BloodClockTowerAI" -DestinationPath "BloodClockTowerAI-Windows.zip"
        
    - name: Upload Windows build
      uses: actions/upload-artifact@v4
      with:
        name: windows-executable
        path: dist/BloodClockTowerAI-Windows.zip
        retention-days: 30

  release:
    runs-on: ubuntu-latest
    needs: build-windows
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Windows build
      uses: actions/download-artifact@v4
      with:
        name: windows-executable
        path: dist/
        
    - name: List downloaded files
      run: |
        echo "Contents of dist directory:"
        ls -la dist/
        
    - name: Create Release Notes
      run: |
        cat > release_notes.md << 'EOF'
        ## Blood on the Clocktower AI Storyteller ${{ github.ref_name }}
        
        ### ðŸŽ­ Features:
        - Full AI Storyteller for Blood on the Clocktower
        - Voice interaction with speech recognition and TTS
        - Enhanced botc.app platform integration
        - Complete Trouble Brewing script support
        - Intelligent decision making for character abilities
        - Real-time game state management
        
        ### ðŸ”§ Installation:
        1. Download `BloodClockTowerAI-Windows.zip`
        2. Extract to a folder
        3. Run `download_models.bat` first to download AI models
        4. Run `BloodClockTowerAI.exe`
        
        ### ðŸŽ¯ System Requirements:
        - Windows 10/11
        - Microphone for voice commands
        - Speakers/headphones for AI narration
        - Internet connection for initial model download
        
        For more information, see the [README](https://github.com/emmjayh/ProjectClocktower/blob/main/README.md).
        EOF
        
    - name: Create or Update Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Try to create release
        if gh release create ${{ github.ref_name }} \
          --title "Blood on the Clocktower AI Storyteller ${{ github.ref_name }}" \
          --notes-file release_notes.md \
          dist/BloodClockTowerAI-Windows.zip; then
          echo "Release created successfully"
        else
          # If creation fails, try to upload to existing release
          echo "Release creation failed, trying to upload to existing release..."
          gh release upload ${{ github.ref_name }} dist/BloodClockTowerAI-Windows.zip --clobber
        fi